Hi, this is your Git file.  Answer the following:

<<<<<<< HEAD
<<<<<<< HEAD
1. My name is : Luke Moses 
2. My teammates names are:Jonathan, Eric, Cameron
3. My favorite programming language is : Bash
4. The name of my semester long mobile application is :
=======
1. My name is : Cameron
2. My teammates names are: Luke, Jon, Eric
3. My favorite programming language is : Objective C
4. The name of my semester long mobile application is : Mountain Finder
>>>>>>> ddde4d1bfffb67e89d1269b2c851023593e46dc0

=======
1. My name is : Eric
1. My name is : Jonathan
2. My teammates names are: Cameron, Luke, Jonathan
3. My favorite programming language is : C++
4. The name of my semester long mobile application is : Something else
4. The name of my semester long mobile application is : something
>>>>>>> 87e4340259d44f18455015a8a1a07ba40eda3b38


merging is a pain
reverting a specific file is a pain
errors are not very specific

cameron's image file added: c7Io3.jpg
Luke's image added: lemons.jpg

seemed to work well, i accidently added the .gitignore before eric got his image in so i guess he couldn't.

added image space.jpg
added image smiley_face.jpg
couldn't add to repo as images was already in the .gitignore, this is a great example of possible errors
that can happen.  According to certain sites .gitignore generally contain .exe files and image files, probably
javascript files and stuff that doesn't need updated or tracked.  Executable code is just regenerated locally
and not tracked.

day 38,
i added and removed some stuff, seemed to work fine, not sure if i did the branches right, i wish i had some water, if you read this we should discuss it tomorrow.

Jonathan is making changes to this file as per insructions in phase 3, and now here is Eric's changes for phase 3 on my branch, part 1.

The process of forking, then cloning, then working with branches and getting them back to the master from the original
can be a little confusing, but once you figure it out, it seems to work pretty well.  The branching technique
works really well, and switching between them is easy to try different stuff.  The workflow is pretty straight forward.
Unless you need to maintain branches it seems like a good idea to merge your working branch into your master branch
for ease of merging prior to your update/push back to the master repo branch. -Eric